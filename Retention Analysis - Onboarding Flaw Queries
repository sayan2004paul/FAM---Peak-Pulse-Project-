
# Onboarding funnel (counts & rates) by cohort / platform / channel :-

-- Find which step is bleeding (e.g., app opens fine, but sync/core view is where it dies).
-- See if Android vs iOS or paid vs organic differs in 7-day activation.



WITH activity_logs AS (
    SELECT 
        user_id, DATE(session_start) AS activity_date
    FROM app_sessions
    WHERE session_duration_seconds >= 30
    
    UNION 
    
    SELECT 
        user_id, DATE(last_sync_date)
    FROM users 
    WHERE last_sync_date IS NOT NULL
    
    UNION 
    
    SELECT 
        user_id, DATE(event_time)
    FROM app_events 
    WHERE feature_category IN ('Recovery', 'Strain', 'Sleep')
    
    UNION 
    
    SELECT 
        user_id, DATE(activity_start)
    FROM activity_data
    
    UNION 
    
    SELECT 
        user_id, DATE(calculated_at)
    FROM daily_scores
),

signups AS (

SELECT 
 u.user_id , 
  DATE(u.created_at) AS signup_date ,
   DATE_FORMAT(u.created_at , '%Y-%m-01') AS cohort_month,
    u.app_platform , u.acquisition_source,u.calibration_complete
 FROM 
  users u 
),

first_7d AS (
  SELECT
    s.user_id,
    s.signup_date,
    s.cohort_month,
    s.app_platform,
    s.acquisition_source,
    s.calibration_complete,

    -- First app open >= 30s (session table is the most trustworthy for "open")
    MIN(CASE WHEN asn.session_start IS NOT NULL THEN DATE(asn.session_start) END) AS first_session_date,

    -- First sync (best we have is users.last_sync_date, so treat any sync within 7d as success if last_sync is in that window)
    MIN(CASE
          WHEN u.last_sync_date IS NOT NULL
           AND DATE(u.last_sync_date) BETWEEN s.signup_date AND DATE_ADD(s.signup_date, INTERVAL 7 DAY)
          THEN DATE(u.last_sync_date)
        END) AS first_sync_date,

    -- First core feature view
    MIN(CASE WHEN ae.event_time IS NOT NULL THEN DATE(ae.event_time) END) AS first_core_view_date,

    -- First workout
    MIN(CASE WHEN ad.activity_start IS NOT NULL THEN DATE(ad.activity_start) END) AS first_workout_date,

    -- First daily score
    MIN(CASE WHEN ds.calculated_at IS NOT NULL THEN DATE(ds.calculated_at) END) AS first_score_date
  FROM signups s
  LEFT JOIN app_sessions asn
    ON asn.user_id = s.user_id
   AND DATE(asn.session_start) BETWEEN s.signup_date AND DATE_ADD(s.signup_date, INTERVAL 7 DAY)
   AND asn.session_duration_seconds >= 30
  LEFT JOIN users u
    ON u.user_id = s.user_id
  LEFT JOIN app_events ae
    ON ae.user_id = s.user_id
   AND DATE(ae.event_time) BETWEEN s.signup_date AND DATE_ADD(s.signup_date, INTERVAL 7 DAY)
   AND ae.feature_category IN ('Recovery','Strain','Sleep')
  LEFT JOIN activity_data ad
    ON ad.user_id = s.user_id
   AND DATE(ad.activity_start) BETWEEN s.signup_date AND DATE_ADD(s.signup_date, INTERVAL 7 DAY)
  LEFT JOIN daily_scores ds
    ON ds.user_id = s.user_id
   AND DATE(ds.calculated_at) BETWEEN s.signup_date AND DATE_ADD(s.signup_date, INTERVAL 7 DAY)
  GROUP BY s.user_id, s.signup_date, s.cohort_month, s.app_platform, s.acquisition_source, s.calibration_complete
),

onboarding_flags AS (
  SELECT
    *,
    -- Complete if event happened within 7d
    (first_session_date IS NOT NULL) AS did_first_session_7d,
    (first_sync_date    IS NOT NULL) AS did_first_sync_7d,
    (first_core_view_date IS NOT NULL) AS did_core_view_7d,
    (first_workout_date IS NOT NULL) AS did_workout_7d,
    (first_score_date   IS NOT NULL) AS did_score_7d,

    -- Activated = any “value” signal within 7d
    (
      (first_sync_date IS NOT NULL)
      OR (first_core_view_date IS NOT NULL)
      OR (first_workout_date IS NOT NULL)
      OR (first_score_date IS NOT NULL)
    ) AS activated_7d
  FROM first_7d
)

SELECT
 cohort_month,app_platform ,acquisition_source,
 
 COUNT(*) AS signups ,
  SUM(did_first_session_7d) AS opened_app_7d,
  SUM(did_first_sync_7d) AS synced_7d , 
SUM(did_core_view_7d) AS core_view_7d,
 SUM(did_workout_7d) AS workout_7d,
  SUM(did_score_7d) AS score_7d,
   SUM(activated_7d) AS activated_7d,
    ROUND(100.0*SUM(did_first_session_7d)/COUNT(*),2) AS pct_opened_app_7d,
     ROUND(100.0* SUM(activated_7d)/COUNT(*),2) AS pct_activated_7d
 FROM 
  onboarding_flags 
  GROUP BY 
     cohort_month,app_platform ,acquisition_source
      ORDER BY 
        cohort_month,app_platform ,acquisition_source


   



